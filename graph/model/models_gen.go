// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Connection interface {
	IsConnection()
}

type CourseConnection struct {
	TotalCount int       `json:"totalCount"`
	PageInfo   *PageInfo `json:"pageInfo"`
	Courses    []*Course `json:"courses"`
}

func (CourseConnection) IsConnection() {}

type NewCourse struct {
	Name string `json:"name"`
	Code string `json:"code"`
}

type NewProfessor struct {
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	RmpID     *string `json:"rmpId"`
}

type NewReview struct {
	Quality    float64   `json:"quality"`
	Difficulty float64   `json:"difficulty"`
	Time       time.Time `json:"time"`
	Tags       []Tag     `json:"tags"`
	Grade      Grade     `json:"grade"`
}

type NewSchool struct {
	Name string `json:"name"`
}

type PageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	HasNextPage     bool   `json:"hasNextPage"`
}

type Professor struct {
	ID         string            `json:"id"`
	FirstName  string            `json:"firstName"`
	LastName   string            `json:"lastName"`
	MiddleName *string           `json:"middleName"`
	Tags       []Tag             `json:"tags"`
	Reviews    *ReviewConnection `json:"reviews"`
	Teaches    *CourseConnection `json:"teaches"`
}

type ProfessorConnection struct {
	TotalCount int          `json:"totalCount"`
	PageInfo   *PageInfo    `json:"pageInfo"`
	Professors []*Professor `json:"professors"`
}

func (ProfessorConnection) IsConnection() {}

type Review struct {
	ID         string    `json:"id"`
	Quality    float64   `json:"quality"`
	Difficulty float64   `json:"difficulty"`
	Time       time.Time `json:"time"`
	Tags       []Tag     `json:"tags"`
	Grade      Grade     `json:"grade"`
}

type ReviewConnection struct {
	TotalCount int       `json:"totalCount"`
	PageInfo   *PageInfo `json:"pageInfo"`
	Reviews    []*Review `json:"reviews"`
}

func (ReviewConnection) IsConnection() {}

type School struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	// Returns a list of professors that teach at this school
	CourseCodes []*string            `json:"courseCodes"`
	Courses     *CourseConnection    `json:"courses"`
	Professors  *ProfessorConnection `json:"professors"`
}

type SchoolConnection struct {
	TotalCount int       `json:"totalCount"`
	PageInfo   *PageInfo `json:"pageInfo"`
	Schools    []*School `json:"schools"`
}

func (SchoolConnection) IsConnection() {}

type Grade string

const (
	GradeAPlus      Grade = "A_PLUS"
	GradeA          Grade = "A"
	GradeAMinus     Grade = "A_MINUS"
	GradeBPlus      Grade = "B_PLUS"
	GradeB          Grade = "B"
	GradeBMinus     Grade = "B_MINUS"
	GradeCPlus      Grade = "C_PLUS"
	GradeC          Grade = "C"
	GradeCMinus     Grade = "C_MINUS"
	GradeDPlus      Grade = "D_PLUS"
	GradeD          Grade = "D"
	GradeDMinus     Grade = "D_MINUS"
	GradeFPlus      Grade = "F_PLUS"
	GradeF          Grade = "F"
	GradeFMinus     Grade = "F_MINUS"
	GradeIncomplete Grade = "INCOMPLETE"
	GradeWithdrawn  Grade = "WITHDRAWN"
	GradeNotSure    Grade = "NOT_SURE"
	GradeOther      Grade = "OTHER"
)

var AllGrade = []Grade{
	GradeAPlus,
	GradeA,
	GradeAMinus,
	GradeBPlus,
	GradeB,
	GradeBMinus,
	GradeCPlus,
	GradeC,
	GradeCMinus,
	GradeDPlus,
	GradeD,
	GradeDMinus,
	GradeFPlus,
	GradeF,
	GradeFMinus,
	GradeIncomplete,
	GradeWithdrawn,
	GradeNotSure,
	GradeOther,
}

func (e Grade) IsValid() bool {
	switch e {
	case GradeAPlus, GradeA, GradeAMinus, GradeBPlus, GradeB, GradeBMinus, GradeCPlus, GradeC, GradeCMinus, GradeDPlus, GradeD, GradeDMinus, GradeFPlus, GradeF, GradeFMinus, GradeIncomplete, GradeWithdrawn, GradeNotSure, GradeOther:
		return true
	}
	return false
}

func (e Grade) String() string {
	return string(e)
}

func (e *Grade) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Grade(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Grade", str)
	}
	return nil
}

func (e Grade) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Tag string

const (
	TagToughGrader            Tag = "TOUGH_GRADER"
	TagGetReadyToRead         Tag = "GET_READY_TO_READ"
	TagParticipationMatters   Tag = "PARTICIPATION_MATTERS"
	TagExtraCredit            Tag = "EXTRA_CREDIT"
	TagGroupProjects          Tag = "GROUP_PROJECTS"
	TagAmazingLectures        Tag = "AMAZING_LECTURES"
	TagClearGradingCriteria   Tag = "CLEAR_GRADING_CRITERIA"
	TagGivesGoodFeedback      Tag = "GIVES_GOOD_FEEDBACK"
	TagInspirational          Tag = "INSPIRATIONAL"
	TagLotsOfHomework         Tag = "LOTS_OF_HOMEWORK"
	TagHilarious              Tag = "HILARIOUS"
	TagBewareOfPopQuizzes     Tag = "BEWARE_OF_POP_QUIZZES"
	TagSoManyPapers           Tag = "SO_MANY_PAPERS"
	TagCaring                 Tag = "CARING"
	TagRespected              Tag = "RESPECTED"
	TagLectureHeavy           Tag = "LECTURE_HEAVY"
	TagGradedByFewThings      Tag = "GRADED_BY_FEW_THINGS"
	TagAccessibleOutsideClass Tag = "ACCESSIBLE_OUTSIDE_CLASS"
	TagOnlineSavvy            Tag = "ONLINE_SAVVY"
)

var AllTag = []Tag{
	TagToughGrader,
	TagGetReadyToRead,
	TagParticipationMatters,
	TagExtraCredit,
	TagGroupProjects,
	TagAmazingLectures,
	TagClearGradingCriteria,
	TagGivesGoodFeedback,
	TagInspirational,
	TagLotsOfHomework,
	TagHilarious,
	TagBewareOfPopQuizzes,
	TagSoManyPapers,
	TagCaring,
	TagRespected,
	TagLectureHeavy,
	TagGradedByFewThings,
	TagAccessibleOutsideClass,
	TagOnlineSavvy,
}

func (e Tag) IsValid() bool {
	switch e {
	case TagToughGrader, TagGetReadyToRead, TagParticipationMatters, TagExtraCredit, TagGroupProjects, TagAmazingLectures, TagClearGradingCriteria, TagGivesGoodFeedback, TagInspirational, TagLotsOfHomework, TagHilarious, TagBewareOfPopQuizzes, TagSoManyPapers, TagCaring, TagRespected, TagLectureHeavy, TagGradedByFewThings, TagAccessibleOutsideClass, TagOnlineSavvy:
		return true
	}
	return false
}

func (e Tag) String() string {
	return string(e)
}

func (e *Tag) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Tag(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Tag", str)
	}
	return nil
}

func (e Tag) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
