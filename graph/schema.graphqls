# noinspection GraphQLInvalidDirectiveLocation, GraphQLDuplicateDirective,GraphQLUnresolvedReference,GraphQLMemberRedefinition,GraphQLMissingType,GraphQLTypeRedefinition

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

directive @pagination(maxLength: Int!) on FIELD_DEFINITION

enum Semester {
    FALL
    SPRING
    SUMMER
}

input TermInput {
    year: Int!
    semester: Semester!
}

type School {
    id: ID!
    name: String!
    """
    Returns a list of professors that teach at this school
    """
    courseCodes(term: TermInput!, ): [String]! @goField(forceResolver: true)
    courses(term: TermInput!, first: Int! = 50, after: String): CourseConnection! @pagination(maxLength: 50) @goField(forceResolver: true)
    professors(first: Int! = 50, after: String): ProfessorConnection! @pagination(maxLength: 50) @goField(forceResolver: true)
}

type Professor {
    id: ID!
    firstName: String!
    lastName: String!

    linked: Boolean! @goField(forceResolver: true)

    rating(topKPercentage: Float): Rating! @goField(forceResolver: true)

    analysis: ProfessorAnalysis! @goField(forceResolver: true)

    school: School! @goField(forceResolver: true)
    reviews(first: Int! = 50, after: String): ReviewConnection! @pagination(maxLength: 50) @goField(forceResolver: true)
    teaches(term: TermInput!, first: Int! = 50, after: String): CourseConnection! @pagination(maxLength: 50) @goField(forceResolver: true)
}

type Rating {
    ratingAmount: Int!

    totalQualityAverage: Float!
    topKMostRecentQualityAverage: Float!

    totalDifficultyAverage: Float!
    topKMostRecentDifficultyAverage: Float!

    averageGrade: Grade!
}

type TagAmount {
    tag: Tag!
    amount: Int!
}

type ChartValue {
    value: Float!
    month: String!
    year: Int!
}

type ProfessorAnalysis {
    tagAmount: [TagAmount!]!
    averageRatingValues: [ChartValue!]
}

type Course {
    id: ID!
    name: String!
    code: String!
    school: School @goField(forceResolver: true)
    taughtBy(term: TermInput!, first: Int! = 50, after: String): ProfessorConnection @pagination(maxLength: 50) @goField(forceResolver: true)
}

input NewCourse {
    name: String!
    code: String!
}

enum Grade {
    A_PLUS
    A
    A_MINUS

    B_PLUS
    B
    B_MINUS

    C_PLUS
    C
    C_MINUS

    D_PLUS
    D
    D_MINUS

    F_PLUS
    F
    F_MINUS

    INCOMPLETE
    WITHDRAWN
    NOT_SURE
    OTHER
}

enum Tag {
    TOUGH_GRADER
    GET_READY_TO_READ
    PARTICIPATION_MATTERS
    EXTRA_CREDIT
    GROUP_PROJECTS
    AMAZING_LECTURES
    CLEAR_GRADING_CRITERIA
    GIVES_GOOD_FEEDBACK
    INSPIRATIONAL
    LOTS_OF_HOMEWORK
    HILARIOUS
    BEWARE_OF_POP_QUIZZES
    SO_MANY_PAPERS
    CARING
    RESPECTED
    LECTURE_HEAVY
    GRADED_BY_FEW_THINGS
    ACCESSIBLE_OUTSIDE_CLASS
    ONLINE_SAVVY
}

type Review {
    id: ID!
    quality: Float!
    difficulty: Float!
    time: RFC3339Time!
    tags: [Tag!]!
    grade: Grade!
}

input NewReview {
    quality: Float!
    difficulty: Float!
    time: RFC3339Time!
    tags: [Tag!]!
    grade: Grade!
}

input NewProfessor {
    firstName: String!
    lastName: String!
    rmpId: String
}

type Query {
    professorByRMPId(rmpId: String!): Professor
    professor(id: ID!): Professor
    school(id: ID!): School
    schools(first: Int! = 50, after: String): SchoolConnection! @pagination(maxLength: 50) @goField(forceResolver: true)
    professors(schoolId: ID!, first: Int! = 50, after: String): ProfessorConnection! @pagination(maxLength: 50) @goField(forceResolver: true)
}

input NewSchool {
    name: String!
}

type Mutation {
    createSchool(input: NewSchool!): School
    createProfessor(schoolId: ID!, input: NewProfessor!): Professor
    createCourse(schoolId: ID!, input: NewCourse!): Course
    createReview(professorId: ID!, input: NewReview!): Review
    registerProfessorForCourse(courseId: ID!, professorId: ID!, term: TermInput!): Boolean!
    mergeProfessor(schoolProfessorId: ID!, rmpProfessorId: ID!, input: NewProfessor!): Professor
}

#██████   █████   ██████  ██ ███    ██  █████  ████████ ██  ██████  ███    ██
#██   ██ ██   ██ ██       ██ ████   ██ ██   ██    ██    ██ ██    ██ ████   ██
#██████  ███████ ██   ███ ██ ██ ██  ██ ███████    ██    ██ ██    ██ ██ ██  ██
#██      ██   ██ ██    ██ ██ ██  ██ ██ ██   ██    ██    ██ ██    ██ ██  ██ ██
#██      ██   ██  ██████  ██ ██   ████ ██   ██    ██    ██  ██████  ██   ████

# For more information regarding the connection model of pagination view:
# https://graphql.org/learn/pagination/#complete-connection-model
interface Connection {
    # The total number of entries
    totalCount: Int!
    # Information for paginating this connection
    pageInfo: PageInfo!
}

type PageInfo {
    startCursor: String!
    endCursor: String!

    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
}

type SchoolConnection implements Connection {
    # Inherited fields from Connection
    totalCount: Int!
    pageInfo: PageInfo!

    schools: [School!]!
}

type ProfessorConnection implements Connection {
    # Inherited fields from Connection
    totalCount: Int!
    pageInfo: PageInfo!

    professors: [Professor!]!
}

type CourseConnection implements Connection {
    # Inherited fields from Connection
    totalCount: Int!
    pageInfo: PageInfo!

    courses: [Course!]!
}

type ReviewConnection implements Connection {
    # Inherited fields from Connection
    totalCount: Int!
    pageInfo: PageInfo!

    reviews: [Review!]!
}

scalar RFC3339Time
